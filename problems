Given a list of words and two words word1 and word2, return the shortest distance between these two words in the list.

Example:
Assume that words = ["practice", "makes", "perfect", "coding", "makes"].

Input: word1 = “coding”, word2 = “practice”
Output: 3
Input: word1 = "makes", word2 = "coding"
Output: 1
Note:
You may assume that word1 does not equal to word2, and word1 and word2 are both in the list.

Solution :
C#
public class Solution {
    public int ShortestDistance(string[] words, string word1, string word2) {
        if(words.Length<2)
            return 0;
 
        int count=0;
        Dictionary<string ,List<int>>places= new Dictionary<string,List<int>>();
        foreach(var elem in words)
        {
            if(!places.ContainsKey(elem))
            {
               places.Add(elem,new List<int>{count}); 
            }
            else
            {
                places[elem].Add(count);
            }
            count++;
        }

     int minDistance=words.Length;
      foreach(var f in places[word1])
      {
          foreach(var s in places[word2])
          {
              if(minDistance>Math.Abs(f-s))
              {
                 minDistance= Math.Abs(f-s);
              }
          }
        }
        return minDistance;
        
    }
}

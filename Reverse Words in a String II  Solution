Given an input string , reverse the string word by word. 

Example:

Input:  ["t","h","e"," ","s","k","y"," ","i","s"," ","b","l","u","e"]
Output: ["b","l","u","e"," ","i","s"," ","s","k","y"," ","t","h","e"]
Note: 

A word is defined as a sequence of non-space characters.
The input string does not contain leading or trailing spaces.
The words are always separated by a single space.
Follow up: Could you do it in-place without allocating extra space?



Solution :
public class Solution {
    //the sky is blue
    //eht yks si eulb
 
    public void ReverseWords(char[] s) {
        if(s==null||s.Length==1)
            return;
        int i=0;
        int j=0;
        while(i<s.Length-1)
        {
            if(s[i]==' ')
            {
                reverse(s,j,i-1);
                j=i+1;
            }
            i++;
        }
        reverse (s,j,s.Length-1);
        reverse(s,0,s.Length-1);
    }

    
    public void reverse(char[] s, int i,int j)
    {
        while(i<j)
        {
            var temp=s[i];
            s[i]=s[j];
            s[j]=temp;
            i++;
            j--;
        }
    }
}
